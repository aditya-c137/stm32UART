
USARTtry1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001734  08001734  00011734  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080017a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000070  08001810  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000e4  08001810  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006dfc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000016fe  00000000  00000000  00026e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002597  00000000  00000000  00028593  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000580  00000000  00000000  0002ab30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006a8  00000000  00000000  0002b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002c4e  00000000  00000000  0002b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002163  00000000  00000000  0002e3a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030509  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010d8  00000000  00000000  00030588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800171c 	.word	0x0800171c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800171c 	.word	0x0800171c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f880 	bl	8000278 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f842 	bl	8000210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f81b 	bl	80001ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f000 fd74 	bl	8000ca8 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	2000009c 	.word	0x2000009c

080001ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fa:	041b      	lsls	r3, r3, #16
 80001fc:	0c1b      	lsrs	r3, r3, #16
 80001fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000206:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000208:	60d3      	str	r3, [r2, #12]
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	68dc      	ldr	r4, [r3, #12]
 8000216:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000220:	2b04      	cmp	r3, #4
 8000222:	bf28      	it	cs
 8000224:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022c:	bf98      	it	ls
 800022e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	fa05 f303 	lsl.w	r3, r5, r3
 8000234:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000238:	bf88      	it	hi
 800023a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	4019      	ands	r1, r3
 800023e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	fa05 f404 	lsl.w	r4, r5, r4
 8000244:	3c01      	subs	r4, #1
 8000246:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000248:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	ea42 0201 	orr.w	r2, r2, r1
 800024e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	bfa9      	itett	ge
 8000254:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	4b06      	ldrlt	r3, [pc, #24]	; (8000274 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	b2d2      	uxtbge	r2, r2
 800025c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	bfbb      	ittet	lt
 8000262:	f000 000f 	andlt.w	r0, r0, #15
 8000266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	541a      	strblt	r2, [r3, r0]
 800026e:	bd30      	pop	{r4, r5, pc}
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000278:	3801      	subs	r0, #1
 800027a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800027e:	d20a      	bcs.n	8000296 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800028c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000290:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000296:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002a8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002aa:	4626      	mov	r6, r4
 80002ac:	4b66      	ldr	r3, [pc, #408]	; (8000448 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ae:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000458 <HAL_GPIO_Init+0x1b4>
 80002b2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800045c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002b6:	680a      	ldr	r2, [r1, #0]
 80002b8:	fa32 f506 	lsrs.w	r5, r2, r6
 80002bc:	d102      	bne.n	80002c4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002be:	b003      	add	sp, #12
 80002c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002c4:	f04f 0801 	mov.w	r8, #1
 80002c8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002cc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002d0:	4590      	cmp	r8, r2
 80002d2:	d17f      	bne.n	80003d4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002d4:	684d      	ldr	r5, [r1, #4]
 80002d6:	2d12      	cmp	r5, #18
 80002d8:	f000 80aa 	beq.w	8000430 <HAL_GPIO_Init+0x18c>
 80002dc:	f200 8083 	bhi.w	80003e6 <HAL_GPIO_Init+0x142>
 80002e0:	2d02      	cmp	r5, #2
 80002e2:	f000 80a2 	beq.w	800042a <HAL_GPIO_Init+0x186>
 80002e6:	d877      	bhi.n	80003d8 <HAL_GPIO_Init+0x134>
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	f000 8089 	beq.w	8000400 <HAL_GPIO_Init+0x15c>
 80002ee:	2d01      	cmp	r5, #1
 80002f0:	f000 8099 	beq.w	8000426 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f8:	2aff      	cmp	r2, #255	; 0xff
 80002fa:	bf93      	iteet	ls
 80002fc:	4682      	movls	sl, r0
 80002fe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000302:	3d08      	subhi	r5, #8
 8000304:	f8d0 b000 	ldrls.w	fp, [r0]
 8000308:	bf92      	itee	ls
 800030a:	00b5      	lslls	r5, r6, #2
 800030c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000310:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000312:	fa09 f805 	lsl.w	r8, r9, r5
 8000316:	ea2b 0808 	bic.w	r8, fp, r8
 800031a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031e:	bf88      	it	hi
 8000320:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	ea48 0505 	orr.w	r5, r8, r5
 8000328:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800032c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000330:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000334:	d04e      	beq.n	80003d4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4d45      	ldr	r5, [pc, #276]	; (800044c <HAL_GPIO_Init+0x1a8>)
 8000338:	4f44      	ldr	r7, [pc, #272]	; (800044c <HAL_GPIO_Init+0x1a8>)
 800033a:	69ad      	ldr	r5, [r5, #24]
 800033c:	f026 0803 	bic.w	r8, r6, #3
 8000340:	f045 0501 	orr.w	r5, r5, #1
 8000344:	61bd      	str	r5, [r7, #24]
 8000346:	69bd      	ldr	r5, [r7, #24]
 8000348:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800034c:	f005 0501 	and.w	r5, r5, #1
 8000350:	9501      	str	r5, [sp, #4]
 8000352:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000356:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800035a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800035c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000360:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000364:	fa09 f90b 	lsl.w	r9, r9, fp
 8000368:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800036c:	4d38      	ldr	r5, [pc, #224]	; (8000450 <HAL_GPIO_Init+0x1ac>)
 800036e:	42a8      	cmp	r0, r5
 8000370:	d063      	beq.n	800043a <HAL_GPIO_Init+0x196>
 8000372:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000376:	42a8      	cmp	r0, r5
 8000378:	d061      	beq.n	800043e <HAL_GPIO_Init+0x19a>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d05f      	beq.n	8000442 <HAL_GPIO_Init+0x19e>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	bf0c      	ite	eq
 800038a:	2503      	moveq	r5, #3
 800038c:	2504      	movne	r5, #4
 800038e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000392:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000396:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800039a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800039c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a0:	bf14      	ite	ne
 80003a2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003a4:	4395      	biceq	r5, r2
 80003a6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003a8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003aa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ae:	bf14      	ite	ne
 80003b0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003b2:	4395      	biceq	r5, r2
 80003b4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003b8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003bc:	bf14      	ite	ne
 80003be:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c0:	4395      	biceq	r5, r2
 80003c2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003c6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ca:	bf14      	ite	ne
 80003cc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ce:	ea25 0202 	biceq.w	r2, r5, r2
 80003d2:	60da      	str	r2, [r3, #12]
	position++;
 80003d4:	3601      	adds	r6, #1
 80003d6:	e76e      	b.n	80002b6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003d8:	2d03      	cmp	r5, #3
 80003da:	d022      	beq.n	8000422 <HAL_GPIO_Init+0x17e>
 80003dc:	2d11      	cmp	r5, #17
 80003de:	d189      	bne.n	80002f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003e0:	68cc      	ldr	r4, [r1, #12]
 80003e2:	3404      	adds	r4, #4
          break;
 80003e4:	e786      	b.n	80002f4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80003e6:	4f1b      	ldr	r7, [pc, #108]	; (8000454 <HAL_GPIO_Init+0x1b0>)
 80003e8:	42bd      	cmp	r5, r7
 80003ea:	d009      	beq.n	8000400 <HAL_GPIO_Init+0x15c>
 80003ec:	d812      	bhi.n	8000414 <HAL_GPIO_Init+0x170>
 80003ee:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000460 <HAL_GPIO_Init+0x1bc>
 80003f2:	454d      	cmp	r5, r9
 80003f4:	d004      	beq.n	8000400 <HAL_GPIO_Init+0x15c>
 80003f6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003fa:	454d      	cmp	r5, r9
 80003fc:	f47f af7a 	bne.w	80002f4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000400:	688c      	ldr	r4, [r1, #8]
 8000402:	b1c4      	cbz	r4, 8000436 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000404:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000406:	bf0c      	ite	eq
 8000408:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800040c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000410:	2408      	movs	r4, #8
 8000412:	e76f      	b.n	80002f4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000414:	4575      	cmp	r5, lr
 8000416:	d0f3      	beq.n	8000400 <HAL_GPIO_Init+0x15c>
 8000418:	4565      	cmp	r5, ip
 800041a:	d0f1      	beq.n	8000400 <HAL_GPIO_Init+0x15c>
 800041c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000464 <HAL_GPIO_Init+0x1c0>
 8000420:	e7eb      	b.n	80003fa <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000422:	2400      	movs	r4, #0
 8000424:	e766      	b.n	80002f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000426:	68cc      	ldr	r4, [r1, #12]
          break;
 8000428:	e764      	b.n	80002f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800042a:	68cc      	ldr	r4, [r1, #12]
 800042c:	3408      	adds	r4, #8
          break;
 800042e:	e761      	b.n	80002f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000430:	68cc      	ldr	r4, [r1, #12]
 8000432:	340c      	adds	r4, #12
          break;
 8000434:	e75e      	b.n	80002f4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000436:	2404      	movs	r4, #4
 8000438:	e75c      	b.n	80002f4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800043a:	2500      	movs	r5, #0
 800043c:	e7a7      	b.n	800038e <HAL_GPIO_Init+0xea>
 800043e:	2501      	movs	r5, #1
 8000440:	e7a5      	b.n	800038e <HAL_GPIO_Init+0xea>
 8000442:	2502      	movs	r5, #2
 8000444:	e7a3      	b.n	800038e <HAL_GPIO_Init+0xea>
 8000446:	bf00      	nop
 8000448:	40010400 	.word	0x40010400
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800
 8000454:	10210000 	.word	0x10210000
 8000458:	10310000 	.word	0x10310000
 800045c:	10320000 	.word	0x10320000
 8000460:	10110000 	.word	0x10110000
 8000464:	10220000 	.word	0x10220000

08000468 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000468:	b10a      	cbz	r2, 800046e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800046a:	6101      	str	r1, [r0, #16]
 800046c:	4770      	bx	lr
 800046e:	0409      	lsls	r1, r1, #16
 8000470:	e7fb      	b.n	800046a <HAL_GPIO_WritePin+0x2>
	...

08000474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000478:	4605      	mov	r5, r0
 800047a:	b908      	cbnz	r0, 8000480 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800047c:	2001      	movs	r0, #1
 800047e:	e03c      	b.n	80004fa <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000480:	6803      	ldr	r3, [r0, #0]
 8000482:	07db      	lsls	r3, r3, #31
 8000484:	d410      	bmi.n	80004a8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000486:	682b      	ldr	r3, [r5, #0]
 8000488:	079f      	lsls	r7, r3, #30
 800048a:	d45d      	bmi.n	8000548 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800048c:	682b      	ldr	r3, [r5, #0]
 800048e:	0719      	lsls	r1, r3, #28
 8000490:	f100 8094 	bmi.w	80005bc <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000494:	682b      	ldr	r3, [r5, #0]
 8000496:	075a      	lsls	r2, r3, #29
 8000498:	f100 80be 	bmi.w	8000618 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800049c:	69e8      	ldr	r0, [r5, #28]
 800049e:	2800      	cmp	r0, #0
 80004a0:	f040 812c 	bne.w	80006fc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004a4:	2000      	movs	r0, #0
 80004a6:	e028      	b.n	80004fa <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004a8:	4c8f      	ldr	r4, [pc, #572]	; (80006e8 <HAL_RCC_OscConfig+0x274>)
 80004aa:	6863      	ldr	r3, [r4, #4]
 80004ac:	f003 030c 	and.w	r3, r3, #12
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d007      	beq.n	80004c4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004b4:	6863      	ldr	r3, [r4, #4]
 80004b6:	f003 030c 	and.w	r3, r3, #12
 80004ba:	2b08      	cmp	r3, #8
 80004bc:	d109      	bne.n	80004d2 <HAL_RCC_OscConfig+0x5e>
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	03de      	lsls	r6, r3, #15
 80004c2:	d506      	bpl.n	80004d2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004c4:	6823      	ldr	r3, [r4, #0]
 80004c6:	039c      	lsls	r4, r3, #14
 80004c8:	d5dd      	bpl.n	8000486 <HAL_RCC_OscConfig+0x12>
 80004ca:	686b      	ldr	r3, [r5, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1da      	bne.n	8000486 <HAL_RCC_OscConfig+0x12>
 80004d0:	e7d4      	b.n	800047c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004d2:	686b      	ldr	r3, [r5, #4]
 80004d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004d8:	d112      	bne.n	8000500 <HAL_RCC_OscConfig+0x8c>
 80004da:	6823      	ldr	r3, [r4, #0]
 80004dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004e2:	f7ff fe7d 	bl	80001e0 <HAL_GetTick>
 80004e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004e8:	6823      	ldr	r3, [r4, #0]
 80004ea:	0398      	lsls	r0, r3, #14
 80004ec:	d4cb      	bmi.n	8000486 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80004ee:	f7ff fe77 	bl	80001e0 <HAL_GetTick>
 80004f2:	1b80      	subs	r0, r0, r6
 80004f4:	2864      	cmp	r0, #100	; 0x64
 80004f6:	d9f7      	bls.n	80004e8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004f8:	2003      	movs	r0, #3
}
 80004fa:	b002      	add	sp, #8
 80004fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000500:	b99b      	cbnz	r3, 800052a <HAL_RCC_OscConfig+0xb6>
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000508:	6023      	str	r3, [r4, #0]
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000510:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000512:	f7ff fe65 	bl	80001e0 <HAL_GetTick>
 8000516:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000518:	6823      	ldr	r3, [r4, #0]
 800051a:	0399      	lsls	r1, r3, #14
 800051c:	d5b3      	bpl.n	8000486 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800051e:	f7ff fe5f 	bl	80001e0 <HAL_GetTick>
 8000522:	1b80      	subs	r0, r0, r6
 8000524:	2864      	cmp	r0, #100	; 0x64
 8000526:	d9f7      	bls.n	8000518 <HAL_RCC_OscConfig+0xa4>
 8000528:	e7e6      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800052a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	d103      	bne.n	800053a <HAL_RCC_OscConfig+0xc6>
 8000532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000536:	6023      	str	r3, [r4, #0]
 8000538:	e7cf      	b.n	80004da <HAL_RCC_OscConfig+0x66>
 800053a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053e:	6023      	str	r3, [r4, #0]
 8000540:	6823      	ldr	r3, [r4, #0]
 8000542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000546:	e7cb      	b.n	80004e0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000548:	4c67      	ldr	r4, [pc, #412]	; (80006e8 <HAL_RCC_OscConfig+0x274>)
 800054a:	6863      	ldr	r3, [r4, #4]
 800054c:	f013 0f0c 	tst.w	r3, #12
 8000550:	d007      	beq.n	8000562 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000552:	6863      	ldr	r3, [r4, #4]
 8000554:	f003 030c 	and.w	r3, r3, #12
 8000558:	2b08      	cmp	r3, #8
 800055a:	d110      	bne.n	800057e <HAL_RCC_OscConfig+0x10a>
 800055c:	6863      	ldr	r3, [r4, #4]
 800055e:	03da      	lsls	r2, r3, #15
 8000560:	d40d      	bmi.n	800057e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	079b      	lsls	r3, r3, #30
 8000566:	d502      	bpl.n	800056e <HAL_RCC_OscConfig+0xfa>
 8000568:	692b      	ldr	r3, [r5, #16]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d186      	bne.n	800047c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	696a      	ldr	r2, [r5, #20]
 8000572:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000576:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800057a:	6023      	str	r3, [r4, #0]
 800057c:	e786      	b.n	800048c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800057e:	692a      	ldr	r2, [r5, #16]
 8000580:	4b5a      	ldr	r3, [pc, #360]	; (80006ec <HAL_RCC_OscConfig+0x278>)
 8000582:	b16a      	cbz	r2, 80005a0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000588:	f7ff fe2a 	bl	80001e0 <HAL_GetTick>
 800058c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	079f      	lsls	r7, r3, #30
 8000592:	d4ec      	bmi.n	800056e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000594:	f7ff fe24 	bl	80001e0 <HAL_GetTick>
 8000598:	1b80      	subs	r0, r0, r6
 800059a:	2802      	cmp	r0, #2
 800059c:	d9f7      	bls.n	800058e <HAL_RCC_OscConfig+0x11a>
 800059e:	e7ab      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005a2:	f7ff fe1d 	bl	80001e0 <HAL_GetTick>
 80005a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005a8:	6823      	ldr	r3, [r4, #0]
 80005aa:	0798      	lsls	r0, r3, #30
 80005ac:	f57f af6e 	bpl.w	800048c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005b0:	f7ff fe16 	bl	80001e0 <HAL_GetTick>
 80005b4:	1b80      	subs	r0, r0, r6
 80005b6:	2802      	cmp	r0, #2
 80005b8:	d9f6      	bls.n	80005a8 <HAL_RCC_OscConfig+0x134>
 80005ba:	e79d      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005bc:	69aa      	ldr	r2, [r5, #24]
 80005be:	4c4a      	ldr	r4, [pc, #296]	; (80006e8 <HAL_RCC_OscConfig+0x274>)
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <HAL_RCC_OscConfig+0x27c>)
 80005c2:	b1da      	cbz	r2, 80005fc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005c8:	f7ff fe0a 	bl	80001e0 <HAL_GetTick>
 80005cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005d0:	079b      	lsls	r3, r3, #30
 80005d2:	d50d      	bpl.n	80005f0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005d8:	4b46      	ldr	r3, [pc, #280]	; (80006f4 <HAL_RCC_OscConfig+0x280>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80005e2:	bf00      	nop
  }
  while (Delay --);
 80005e4:	9b01      	ldr	r3, [sp, #4]
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f9      	bne.n	80005e2 <HAL_RCC_OscConfig+0x16e>
 80005ee:	e751      	b.n	8000494 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80005f0:	f7ff fdf6 	bl	80001e0 <HAL_GetTick>
 80005f4:	1b80      	subs	r0, r0, r6
 80005f6:	2802      	cmp	r0, #2
 80005f8:	d9e9      	bls.n	80005ce <HAL_RCC_OscConfig+0x15a>
 80005fa:	e77d      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005fe:	f7ff fdef 	bl	80001e0 <HAL_GetTick>
 8000602:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000606:	079f      	lsls	r7, r3, #30
 8000608:	f57f af44 	bpl.w	8000494 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800060c:	f7ff fde8 	bl	80001e0 <HAL_GetTick>
 8000610:	1b80      	subs	r0, r0, r6
 8000612:	2802      	cmp	r0, #2
 8000614:	d9f6      	bls.n	8000604 <HAL_RCC_OscConfig+0x190>
 8000616:	e76f      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000618:	4c33      	ldr	r4, [pc, #204]	; (80006e8 <HAL_RCC_OscConfig+0x274>)
 800061a:	69e3      	ldr	r3, [r4, #28]
 800061c:	00d8      	lsls	r0, r3, #3
 800061e:	d424      	bmi.n	800066a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000620:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	69e3      	ldr	r3, [r4, #28]
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61e3      	str	r3, [r4, #28]
 800062a:	69e3      	ldr	r3, [r4, #28]
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000634:	4e30      	ldr	r6, [pc, #192]	; (80006f8 <HAL_RCC_OscConfig+0x284>)
 8000636:	6833      	ldr	r3, [r6, #0]
 8000638:	05d9      	lsls	r1, r3, #23
 800063a:	d518      	bpl.n	800066e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800063c:	68eb      	ldr	r3, [r5, #12]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d126      	bne.n	8000690 <HAL_RCC_OscConfig+0x21c>
 8000642:	6a23      	ldr	r3, [r4, #32]
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800064a:	f7ff fdc9 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800064e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000652:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000654:	6a23      	ldr	r3, [r4, #32]
 8000656:	079b      	lsls	r3, r3, #30
 8000658:	d53f      	bpl.n	80006da <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800065a:	2f00      	cmp	r7, #0
 800065c:	f43f af1e 	beq.w	800049c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000660:	69e3      	ldr	r3, [r4, #28]
 8000662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000666:	61e3      	str	r3, [r4, #28]
 8000668:	e718      	b.n	800049c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800066a:	2700      	movs	r7, #0
 800066c:	e7e2      	b.n	8000634 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800066e:	6833      	ldr	r3, [r6, #0]
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000676:	f7ff fdb3 	bl	80001e0 <HAL_GetTick>
 800067a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800067c:	6833      	ldr	r3, [r6, #0]
 800067e:	05da      	lsls	r2, r3, #23
 8000680:	d4dc      	bmi.n	800063c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000682:	f7ff fdad 	bl	80001e0 <HAL_GetTick>
 8000686:	eba0 0008 	sub.w	r0, r0, r8
 800068a:	2864      	cmp	r0, #100	; 0x64
 800068c:	d9f6      	bls.n	800067c <HAL_RCC_OscConfig+0x208>
 800068e:	e733      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000690:	b9ab      	cbnz	r3, 80006be <HAL_RCC_OscConfig+0x24a>
 8000692:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000694:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000698:	f023 0301 	bic.w	r3, r3, #1
 800069c:	6223      	str	r3, [r4, #32]
 800069e:	6a23      	ldr	r3, [r4, #32]
 80006a0:	f023 0304 	bic.w	r3, r3, #4
 80006a4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006a6:	f7ff fd9b 	bl	80001e0 <HAL_GetTick>
 80006aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006ac:	6a23      	ldr	r3, [r4, #32]
 80006ae:	0798      	lsls	r0, r3, #30
 80006b0:	d5d3      	bpl.n	800065a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006b2:	f7ff fd95 	bl	80001e0 <HAL_GetTick>
 80006b6:	1b80      	subs	r0, r0, r6
 80006b8:	4540      	cmp	r0, r8
 80006ba:	d9f7      	bls.n	80006ac <HAL_RCC_OscConfig+0x238>
 80006bc:	e71c      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006be:	2b05      	cmp	r3, #5
 80006c0:	6a23      	ldr	r3, [r4, #32]
 80006c2:	d103      	bne.n	80006cc <HAL_RCC_OscConfig+0x258>
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6223      	str	r3, [r4, #32]
 80006ca:	e7ba      	b.n	8000642 <HAL_RCC_OscConfig+0x1ce>
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	6223      	str	r3, [r4, #32]
 80006d2:	6a23      	ldr	r3, [r4, #32]
 80006d4:	f023 0304 	bic.w	r3, r3, #4
 80006d8:	e7b6      	b.n	8000648 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006da:	f7ff fd81 	bl	80001e0 <HAL_GetTick>
 80006de:	eba0 0008 	sub.w	r0, r0, r8
 80006e2:	42b0      	cmp	r0, r6
 80006e4:	d9b6      	bls.n	8000654 <HAL_RCC_OscConfig+0x1e0>
 80006e6:	e707      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
 80006e8:	40021000 	.word	0x40021000
 80006ec:	42420000 	.word	0x42420000
 80006f0:	42420480 	.word	0x42420480
 80006f4:	20000008 	.word	0x20000008
 80006f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <HAL_RCC_OscConfig+0x334>)
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	461c      	mov	r4, r3
 8000702:	f002 020c 	and.w	r2, r2, #12
 8000706:	2a08      	cmp	r2, #8
 8000708:	d03d      	beq.n	8000786 <HAL_RCC_OscConfig+0x312>
 800070a:	2300      	movs	r3, #0
 800070c:	4e27      	ldr	r6, [pc, #156]	; (80007ac <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800070e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000710:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000712:	d12b      	bne.n	800076c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000714:	f7ff fd64 	bl	80001e0 <HAL_GetTick>
 8000718:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	0199      	lsls	r1, r3, #6
 800071e:	d41f      	bmi.n	8000760 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000720:	6a2b      	ldr	r3, [r5, #32]
 8000722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000726:	d105      	bne.n	8000734 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000728:	6862      	ldr	r2, [r4, #4]
 800072a:	68a9      	ldr	r1, [r5, #8]
 800072c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000730:	430a      	orrs	r2, r1
 8000732:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000734:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000736:	6862      	ldr	r2, [r4, #4]
 8000738:	430b      	orrs	r3, r1
 800073a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800073e:	4313      	orrs	r3, r2
 8000740:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000742:	2301      	movs	r3, #1
 8000744:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000746:	f7ff fd4b 	bl	80001e0 <HAL_GetTick>
 800074a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	019a      	lsls	r2, r3, #6
 8000750:	f53f aea8 	bmi.w	80004a4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000754:	f7ff fd44 	bl	80001e0 <HAL_GetTick>
 8000758:	1b40      	subs	r0, r0, r5
 800075a:	2802      	cmp	r0, #2
 800075c:	d9f6      	bls.n	800074c <HAL_RCC_OscConfig+0x2d8>
 800075e:	e6cb      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000760:	f7ff fd3e 	bl	80001e0 <HAL_GetTick>
 8000764:	1bc0      	subs	r0, r0, r7
 8000766:	2802      	cmp	r0, #2
 8000768:	d9d7      	bls.n	800071a <HAL_RCC_OscConfig+0x2a6>
 800076a:	e6c5      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800076c:	f7ff fd38 	bl	80001e0 <HAL_GetTick>
 8000770:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	f57f ae95 	bpl.w	80004a4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800077a:	f7ff fd31 	bl	80001e0 <HAL_GetTick>
 800077e:	1b40      	subs	r0, r0, r5
 8000780:	2802      	cmp	r0, #2
 8000782:	d9f6      	bls.n	8000772 <HAL_RCC_OscConfig+0x2fe>
 8000784:	e6b8      	b.n	80004f8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000786:	2801      	cmp	r0, #1
 8000788:	f43f aeb7 	beq.w	80004fa <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800078c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800078e:	6a2b      	ldr	r3, [r5, #32]
 8000790:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000794:	429a      	cmp	r2, r3
 8000796:	f47f ae71 	bne.w	800047c <HAL_RCC_OscConfig+0x8>
 800079a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800079c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007a0:	1ac0      	subs	r0, r0, r3
 80007a2:	bf18      	it	ne
 80007a4:	2001      	movne	r0, #1
 80007a6:	e6a8      	b.n	80004fa <HAL_RCC_OscConfig+0x86>
 80007a8:	40021000 	.word	0x40021000
 80007ac:	42420060 	.word	0x42420060

080007b0 <HAL_RCC_GetSysClockFreq>:
{
 80007b0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007b4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007b6:	ac02      	add	r4, sp, #8
 80007b8:	f103 0510 	add.w	r5, r3, #16
 80007bc:	4622      	mov	r2, r4
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	6859      	ldr	r1, [r3, #4]
 80007c2:	3308      	adds	r3, #8
 80007c4:	c203      	stmia	r2!, {r0, r1}
 80007c6:	42ab      	cmp	r3, r5
 80007c8:	4614      	mov	r4, r2
 80007ca:	d1f7      	bne.n	80007bc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007cc:	2301      	movs	r3, #1
 80007ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80007d2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007d4:	4911      	ldr	r1, [pc, #68]	; (800081c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007d6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007da:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007dc:	f003 020c 	and.w	r2, r3, #12
 80007e0:	2a08      	cmp	r2, #8
 80007e2:	d117      	bne.n	8000814 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007e4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007e8:	a806      	add	r0, sp, #24
 80007ea:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007ec:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007ee:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f2:	d50c      	bpl.n	800080e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007fc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007fe:	aa06      	add	r2, sp, #24
 8000800:	4413      	add	r3, r2
 8000802:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000806:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800080a:	b007      	add	sp, #28
 800080c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_RCC_GetSysClockFreq+0x74>)
 8000810:	4350      	muls	r0, r2
 8000812:	e7fa      	b.n	800080a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000816:	e7f8      	b.n	800080a <HAL_RCC_GetSysClockFreq+0x5a>
 8000818:	08001734 	.word	0x08001734
 800081c:	40021000 	.word	0x40021000
 8000820:	007a1200 	.word	0x007a1200
 8000824:	003d0900 	.word	0x003d0900

08000828 <HAL_RCC_ClockConfig>:
{
 8000828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800082c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800082e:	4604      	mov	r4, r0
 8000830:	b910      	cbnz	r0, 8000838 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000832:	2001      	movs	r0, #1
 8000834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000838:	4a45      	ldr	r2, [pc, #276]	; (8000950 <HAL_RCC_ClockConfig+0x128>)
 800083a:	6813      	ldr	r3, [r2, #0]
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	428b      	cmp	r3, r1
 8000842:	d329      	bcc.n	8000898 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000844:	6821      	ldr	r1, [r4, #0]
 8000846:	078e      	lsls	r6, r1, #30
 8000848:	d431      	bmi.n	80008ae <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800084a:	07ca      	lsls	r2, r1, #31
 800084c:	d444      	bmi.n	80008d8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800084e:	4a40      	ldr	r2, [pc, #256]	; (8000950 <HAL_RCC_ClockConfig+0x128>)
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	429d      	cmp	r5, r3
 8000858:	d367      	bcc.n	800092a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800085a:	6822      	ldr	r2, [r4, #0]
 800085c:	4d3d      	ldr	r5, [pc, #244]	; (8000954 <HAL_RCC_ClockConfig+0x12c>)
 800085e:	f012 0f04 	tst.w	r2, #4
 8000862:	d16e      	bne.n	8000942 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000864:	0713      	lsls	r3, r2, #28
 8000866:	d506      	bpl.n	8000876 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000868:	686b      	ldr	r3, [r5, #4]
 800086a:	6922      	ldr	r2, [r4, #16]
 800086c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000870:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000874:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000876:	f7ff ff9b 	bl	80007b0 <HAL_RCC_GetSysClockFreq>
 800087a:	686b      	ldr	r3, [r5, #4]
 800087c:	4a36      	ldr	r2, [pc, #216]	; (8000958 <HAL_RCC_ClockConfig+0x130>)
 800087e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000882:	5cd3      	ldrb	r3, [r2, r3]
 8000884:	40d8      	lsrs	r0, r3
 8000886:	4b35      	ldr	r3, [pc, #212]	; (800095c <HAL_RCC_ClockConfig+0x134>)
 8000888:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800088a:	4b35      	ldr	r3, [pc, #212]	; (8000960 <HAL_RCC_ClockConfig+0x138>)
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	f7ff fc65 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000892:	2000      	movs	r0, #0
 8000894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	f023 0307 	bic.w	r3, r3, #7
 800089e:	430b      	orrs	r3, r1
 80008a0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008a2:	6813      	ldr	r3, [r2, #0]
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	4299      	cmp	r1, r3
 80008aa:	d1c2      	bne.n	8000832 <HAL_RCC_ClockConfig+0xa>
 80008ac:	e7ca      	b.n	8000844 <HAL_RCC_ClockConfig+0x1c>
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008b0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008b4:	bf1e      	ittt	ne
 80008b6:	685a      	ldrne	r2, [r3, #4]
 80008b8:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008bc:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008be:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008c0:	bf42      	ittt	mi
 80008c2:	685a      	ldrmi	r2, [r3, #4]
 80008c4:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008c8:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	68a0      	ldr	r0, [r4, #8]
 80008ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008d2:	4302      	orrs	r2, r0
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	e7b8      	b.n	800084a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d8:	6862      	ldr	r2, [r4, #4]
 80008da:	4e1e      	ldr	r6, [pc, #120]	; (8000954 <HAL_RCC_ClockConfig+0x12c>)
 80008dc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008de:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e0:	d11b      	bne.n	800091a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e6:	d0a4      	beq.n	8000832 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ea:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ee:	f023 0303 	bic.w	r3, r3, #3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80008f6:	f7ff fc73 	bl	80001e0 <HAL_GetTick>
 80008fa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80008fc:	6873      	ldr	r3, [r6, #4]
 80008fe:	6862      	ldr	r2, [r4, #4]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000908:	d0a1      	beq.n	800084e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800090a:	f7ff fc69 	bl	80001e0 <HAL_GetTick>
 800090e:	1bc0      	subs	r0, r0, r7
 8000910:	4540      	cmp	r0, r8
 8000912:	d9f3      	bls.n	80008fc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000914:	2003      	movs	r0, #3
}
 8000916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800091a:	2a02      	cmp	r2, #2
 800091c:	d102      	bne.n	8000924 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800091e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000922:	e7e0      	b.n	80008e6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	f013 0f02 	tst.w	r3, #2
 8000928:	e7dd      	b.n	80008e6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	f023 0307 	bic.w	r3, r3, #7
 8000930:	432b      	orrs	r3, r5
 8000932:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000934:	6813      	ldr	r3, [r2, #0]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	429d      	cmp	r5, r3
 800093c:	f47f af79 	bne.w	8000832 <HAL_RCC_ClockConfig+0xa>
 8000940:	e78b      	b.n	800085a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000942:	686b      	ldr	r3, [r5, #4]
 8000944:	68e1      	ldr	r1, [r4, #12]
 8000946:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800094a:	430b      	orrs	r3, r1
 800094c:	606b      	str	r3, [r5, #4]
 800094e:	e789      	b.n	8000864 <HAL_RCC_ClockConfig+0x3c>
 8000950:	40022000 	.word	0x40022000
 8000954:	40021000 	.word	0x40021000
 8000958:	0800174b 	.word	0x0800174b
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000972:	6810      	ldr	r0, [r2, #0]
}
 8000974:	40d8      	lsrs	r0, r3
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	0800175b 	.word	0x0800175b
 8000980:	20000008 	.word	0x20000008

08000984 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000992:	6810      	ldr	r0, [r2, #0]
}
 8000994:	40d8      	lsrs	r0, r3
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000
 800099c:	0800175b 	.word	0x0800175b
 80009a0:	20000008 	.word	0x20000008

080009a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009a8:	6803      	ldr	r3, [r0, #0]
 80009aa:	68c1      	ldr	r1, [r0, #12]
 80009ac:	691a      	ldr	r2, [r3, #16]
 80009ae:	2419      	movs	r4, #25
 80009b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80009b4:	430a      	orrs	r2, r1
 80009b6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009b8:	6882      	ldr	r2, [r0, #8]
 80009ba:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80009bc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009be:	4302      	orrs	r2, r0
 80009c0:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80009c2:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80009c6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009ca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80009cc:	430a      	orrs	r2, r1
 80009ce:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	69a9      	ldr	r1, [r5, #24]
 80009d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <UART_SetConfig+0x70>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d114      	bne.n	8000a0c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80009e2:	f7ff ffcf 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80009e6:	4360      	muls	r0, r4
 80009e8:	686c      	ldr	r4, [r5, #4]
 80009ea:	2264      	movs	r2, #100	; 0x64
 80009ec:	00a4      	lsls	r4, r4, #2
 80009ee:	fbb0 f0f4 	udiv	r0, r0, r4
 80009f2:	fbb0 f4f2 	udiv	r4, r0, r2
 80009f6:	fb02 0314 	mls	r3, r2, r4, r0
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	3332      	adds	r3, #50	; 0x32
 80009fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a02:	6829      	ldr	r1, [r5, #0]
 8000a04:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000a08:	608b      	str	r3, [r1, #8]
 8000a0a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000a0c:	f7ff ffaa 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000a10:	e7e9      	b.n	80009e6 <UART_SetConfig+0x42>
 8000a12:	bf00      	nop
 8000a14:	40013800 	.word	0x40013800

08000a18 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	460e      	mov	r6, r1
 8000a1e:	4617      	mov	r7, r2
 8000a20:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000a22:	6821      	ldr	r1, [r4, #0]
 8000a24:	680b      	ldr	r3, [r1, #0]
 8000a26:	ea36 0303 	bics.w	r3, r6, r3
 8000a2a:	d101      	bne.n	8000a30 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000a2c:	2000      	movs	r0, #0
}
 8000a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000a30:	1c6b      	adds	r3, r5, #1
 8000a32:	d0f7      	beq.n	8000a24 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a34:	b995      	cbnz	r5, 8000a5c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a36:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000a38:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000a40:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a42:	695a      	ldr	r2, [r3, #20]
 8000a44:	f022 0201 	bic.w	r2, r2, #1
 8000a48:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000a50:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000a54:	2300      	movs	r3, #0
 8000a56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a5c:	f7ff fbc0 	bl	80001e0 <HAL_GetTick>
 8000a60:	1bc0      	subs	r0, r0, r7
 8000a62:	4285      	cmp	r5, r0
 8000a64:	d2dd      	bcs.n	8000a22 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000a66:	e7e6      	b.n	8000a36 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000a68 <HAL_UART_Init>:
{
 8000a68:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	b340      	cbz	r0, 8000ac0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000a6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000a72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a76:	b91b      	cbnz	r3, 8000a80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000a78:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000a7c:	f000 f936 	bl	8000cec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000a80:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000a82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000a84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000a88:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000a8a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a90:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000a92:	f7ff ff87 	bl	80009a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a96:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a98:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000aa8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ab0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000ab2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ab4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000ab6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000aba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000abe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ac0:	2001      	movs	r0, #1
}
 8000ac2:	bd10      	pop	{r4, pc}

08000ac4 <HAL_UART_Transmit>:
{
 8000ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000aca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000ace:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000ad0:	2b20      	cmp	r3, #32
{
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000ad6:	d14e      	bne.n	8000b76 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	d049      	beq.n	8000b70 <HAL_UART_Transmit+0xac>
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	d047      	beq.n	8000b70 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000ae0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d046      	beq.n	8000b76 <HAL_UART_Transmit+0xb2>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000af2:	2321      	movs	r3, #33	; 0x21
 8000af4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000af8:	f7ff fb72 	bl	80001e0 <HAL_GetTick>
 8000afc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000afe:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000b02:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000b06:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b96b      	cbnz	r3, 8000b28 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4632      	mov	r2, r6
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	4620      	mov	r0, r4
 8000b14:	f7ff ff80 	bl	8000a18 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b18:	b9a8      	cbnz	r0, 8000b46 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000b1a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000b1c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000b20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000b28:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b2a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b32:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b34:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b3e:	d10e      	bne.n	8000b5e <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b40:	f7ff ff6a 	bl	8000a18 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b44:	b110      	cbz	r0, 8000b4c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000b46:	2003      	movs	r0, #3
 8000b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000b4c:	882b      	ldrh	r3, [r5, #0]
 8000b4e:	6822      	ldr	r2, [r4, #0]
 8000b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b54:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000b56:	6923      	ldr	r3, [r4, #16]
 8000b58:	b943      	cbnz	r3, 8000b6c <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000b5a:	3502      	adds	r5, #2
 8000b5c:	e7d3      	b.n	8000b06 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b5e:	f7ff ff5b 	bl	8000a18 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d1ef      	bne.n	8000b46 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	782a      	ldrb	r2, [r5, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	3501      	adds	r5, #1
 8000b6e:	e7ca      	b.n	8000b06 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000b70:	2001      	movs	r0, #1
 8000b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000b76:	2002      	movs	r0, #2
}
 8000b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b7c <increment>:
#include "variabl3s.h"

int count = 0;

void increment(int i){
	count = (count + i) % 200;
 8000b7c:	21c8      	movs	r1, #200	; 0xc8
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <increment+0x14>)
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	4418      	add	r0, r3
 8000b84:	fb90 f3f1 	sdiv	r3, r0, r1
 8000b88:	fb01 0013 	mls	r0, r1, r3, r0
 8000b8c:	6010      	str	r0, [r2, #0]
 8000b8e:	4770      	bx	lr
 8000b90:	2000008c 	.word	0x2000008c

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b500      	push	{lr}
 8000b96:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b98:	2228      	movs	r2, #40	; 0x28
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	a806      	add	r0, sp, #24
 8000b9e:	f000 f97b 	bl	8000e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba2:	2214      	movs	r2, #20
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	a801      	add	r0, sp, #4
 8000ba8:	f000 f976 	bl	8000e98 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bac:	2302      	movs	r3, #2
 8000bae:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb4:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bba:	f7ff fc5b 	bl	8000474 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bbe:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc6:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bca:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bce:	f7ff fe2b 	bl	8000828 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000bd2:	b011      	add	sp, #68	; 0x44
 8000bd4:	f85d fb04 	ldr.w	pc, [sp], #4

08000bd8 <main>:
{
 8000bd8:	b500      	push	{lr}
 8000bda:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000bdc:	f7ff fae2 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8000be0:	f7ff ffd8 	bl	8000b94 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	2210      	movs	r2, #16
 8000be6:	2100      	movs	r1, #0
 8000be8:	a803      	add	r0, sp, #12
 8000bea:	f000 f955 	bl	8000e98 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <main+0xb4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <main+0xb8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	f042 0210 	orr.w	r2, r2, #16
 8000bfc:	619a      	str	r2, [r3, #24]
 8000bfe:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	f002 0210 	and.w	r2, r2, #16
 8000c06:	9201      	str	r2, [sp, #4]
 8000c08:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	699a      	ldr	r2, [r3, #24]
	  sprintf(print,"%d",count);
 8000c0c:	4e21      	ldr	r6, [pc, #132]	; (8000c94 <main+0xbc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	f042 0204 	orr.w	r2, r2, #4
 8000c12:	619a      	str	r2, [r3, #24]
 8000c14:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c20:	f7ff fc22 	bl	8000468 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c28:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	a903      	add	r1, sp, #12
 8000c32:	4817      	ldr	r0, [pc, #92]	; (8000c90 <main+0xb8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f7ff fb34 	bl	80002a4 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 9600;
 8000c3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8000c40:	4815      	ldr	r0, [pc, #84]	; (8000c98 <main+0xc0>)
  huart1.Init.BaudRate = 9600;
 8000c42:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <main+0xc4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c44:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8000c46:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4e:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c50:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c52:	61c4      	str	r4, [r0, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c54:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c56:	f7ff ff07 	bl	8000a68 <HAL_UART_Init>
	  sprintf(print,"%d",count);
 8000c5a:	4d11      	ldr	r5, [pc, #68]	; (8000ca0 <main+0xc8>)
	  strcat(print,"\r\n\0");
 8000c5c:	4c11      	ldr	r4, [pc, #68]	; (8000ca4 <main+0xcc>)
	  increment(1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff ff8c 	bl	8000b7c <increment>
	  sprintf(print,"%d",count);
 8000c64:	6832      	ldr	r2, [r6, #0]
 8000c66:	4629      	mov	r1, r5
 8000c68:	a803      	add	r0, sp, #12
 8000c6a:	f000 f91d 	bl	8000ea8 <siprintf>
	  strcat(print,"\r\n\0");
 8000c6e:	4621      	mov	r1, r4
 8000c70:	a803      	add	r0, sp, #12
 8000c72:	f000 f93d 	bl	8000ef0 <strcat>
	  HAL_UART_Transmit(&huart1, (uint8_t *) print, strlen(print) , HAL_MAX_DELAY);
 8000c76:	a803      	add	r0, sp, #12
 8000c78:	f7ff fa68 	bl	800014c <strlen>
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	b282      	uxth	r2, r0
 8000c82:	a903      	add	r1, sp, #12
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <main+0xc0>)
 8000c86:	f7ff ff1d 	bl	8000ac4 <HAL_UART_Transmit>
 8000c8a:	e7e8      	b.n	8000c5e <main+0x86>
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40011000 	.word	0x40011000
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	200000a0 	.word	0x200000a0
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	08001748 	.word	0x08001748
 8000ca4:	08001744 	.word	0x08001744

08000ca8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_MspInit+0x3c>)
{
 8000caa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	619a      	str	r2, [r3, #24]
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	f002 0201 	and.w	r2, r2, #1
 8000cba:	9200      	str	r2, [sp, #0]
 8000cbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	69da      	ldr	r2, [r3, #28]
 8000cc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cc4:	61da      	str	r2, [r3, #28]
 8000cc6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd2:	6853      	ldr	r3, [r2, #4]
 8000cd4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	b002      	add	sp, #8
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4604      	mov	r4, r0
 8000cf0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	a802      	add	r0, sp, #8
 8000cf8:	f000 f8ce 	bl	8000e98 <memset>
  if(huart->Instance==USART1)
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_UART_MspInit+0x70>)
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d128      	bne.n	8000d56 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d04:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000d08:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d10:	619a      	str	r2, [r3, #24]
 8000d12:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d1a:	9200      	str	r2, [sp, #0]
 8000d1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	f042 0204 	orr.w	r2, r2, #4
 8000d24:	619a      	str	r2, [r3, #24]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d34:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f7ff fab1 	bl	80002a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	a902      	add	r1, sp, #8
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f7ff faa7 	bl	80002a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d56:	b006      	add	sp, #24
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	40010800 	.word	0x40010800

08000d64 <NMI_Handler>:
 8000d64:	4770      	bx	lr

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler>

08000d6e <SVC_Handler>:
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f7ff ba28 	b.w	80001c8 <HAL_IncTick>

08000d78 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000d78:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <_sbrk+0x2c>)
{
 8000d7c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	b909      	cbnz	r1, 8000d86 <_sbrk+0xe>
		heap_end = &end;
 8000d82:	4909      	ldr	r1, [pc, #36]	; (8000da8 <_sbrk+0x30>)
 8000d84:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000d86:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000d88:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000d8a:	4402      	add	r2, r0
 8000d8c:	428a      	cmp	r2, r1
 8000d8e:	d906      	bls.n	8000d9e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000d90:	f000 f858 	bl	8000e44 <__errno>
 8000d94:	230c      	movs	r3, #12
 8000d96:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000d9e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000da0:	bd08      	pop	{r3, pc}
 8000da2:	bf00      	nop
 8000da4:	20000090 	.word	0x20000090
 8000da8:	200000e4 	.word	0x200000e4

08000dac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <SystemInit+0x40>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f042 0201 	orr.w	r2, r2, #1
 8000db4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000db6:	6859      	ldr	r1, [r3, #4]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <SystemInit+0x44>)
 8000dba:	400a      	ands	r2, r1
 8000dbc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000dc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dd0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000dd8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000dda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dde:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000de0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <SystemInit+0x48>)
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	f8ff0000 	.word	0xf8ff0000
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000df8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dfa:	e003      	b.n	8000e04 <LoopCopyDataInit>

08000dfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e02:	3104      	adds	r1, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e04:	480a      	ldr	r0, [pc, #40]	; (8000e30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e0c:	d3f6      	bcc.n	8000dfc <CopyDataInit>
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e10:	e002      	b.n	8000e18 <LoopFillZerobss>

08000e12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e14:	f842 3b04 	str.w	r3, [r2], #4

08000e18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e1c:	d3f9      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e1e:	f7ff ffc5 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f000 f815 	bl	8000e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fed7 	bl	8000bd8 <main>
  bx lr
 8000e2a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e2c:	080017a0 	.word	0x080017a0
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000e38:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000e3c:	200000e4 	.word	0x200000e4

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>
	...

08000e44 <__errno>:
 8000e44:	4b01      	ldr	r3, [pc, #4]	; (8000e4c <__errno+0x8>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000000c 	.word	0x2000000c

08000e50 <__libc_init_array>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	2500      	movs	r5, #0
 8000e54:	4e0c      	ldr	r6, [pc, #48]	; (8000e88 <__libc_init_array+0x38>)
 8000e56:	4c0d      	ldr	r4, [pc, #52]	; (8000e8c <__libc_init_array+0x3c>)
 8000e58:	1ba4      	subs	r4, r4, r6
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	d109      	bne.n	8000e74 <__libc_init_array+0x24>
 8000e60:	f000 fc5c 	bl	800171c <_init>
 8000e64:	2500      	movs	r5, #0
 8000e66:	4e0a      	ldr	r6, [pc, #40]	; (8000e90 <__libc_init_array+0x40>)
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <__libc_init_array+0x44>)
 8000e6a:	1ba4      	subs	r4, r4, r6
 8000e6c:	10a4      	asrs	r4, r4, #2
 8000e6e:	42a5      	cmp	r5, r4
 8000e70:	d105      	bne.n	8000e7e <__libc_init_array+0x2e>
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e78:	4798      	blx	r3
 8000e7a:	3501      	adds	r5, #1
 8000e7c:	e7ee      	b.n	8000e5c <__libc_init_array+0xc>
 8000e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e82:	4798      	blx	r3
 8000e84:	3501      	adds	r5, #1
 8000e86:	e7f2      	b.n	8000e6e <__libc_init_array+0x1e>
 8000e88:	08001798 	.word	0x08001798
 8000e8c:	08001798 	.word	0x08001798
 8000e90:	08001798 	.word	0x08001798
 8000e94:	0800179c 	.word	0x0800179c

08000e98 <memset>:
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4402      	add	r2, r0
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d100      	bne.n	8000ea2 <memset+0xa>
 8000ea0:	4770      	bx	lr
 8000ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ea6:	e7f9      	b.n	8000e9c <memset+0x4>

08000ea8 <siprintf>:
 8000ea8:	b40e      	push	{r1, r2, r3}
 8000eaa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000eae:	b500      	push	{lr}
 8000eb0:	b09c      	sub	sp, #112	; 0x70
 8000eb2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8000eb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000eba:	9104      	str	r1, [sp, #16]
 8000ebc:	9107      	str	r1, [sp, #28]
 8000ebe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8000ec4:	9002      	str	r0, [sp, #8]
 8000ec6:	9006      	str	r0, [sp, #24]
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <siprintf+0x44>)
 8000eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ece:	f8ad 1016 	strh.w	r1, [sp, #22]
 8000ed2:	6800      	ldr	r0, [r0, #0]
 8000ed4:	a902      	add	r1, sp, #8
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f000 f874 	bl	8000fc4 <_svfiprintf_r>
 8000edc:	2200      	movs	r2, #0
 8000ede:	9b02      	ldr	r3, [sp, #8]
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	b01c      	add	sp, #112	; 0x70
 8000ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ee8:	b003      	add	sp, #12
 8000eea:	4770      	bx	lr
 8000eec:	2000000c 	.word	0x2000000c

08000ef0 <strcat>:
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	b510      	push	{r4, lr}
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	781c      	ldrb	r4, [r3, #0]
 8000ef8:	3201      	adds	r2, #1
 8000efa:	2c00      	cmp	r4, #0
 8000efc:	d1fa      	bne.n	8000ef4 <strcat+0x4>
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d1f9      	bne.n	8000f00 <strcat+0x10>
 8000f0c:	bd10      	pop	{r4, pc}

08000f0e <__ssputs_r>:
 8000f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f12:	688e      	ldr	r6, [r1, #8]
 8000f14:	4682      	mov	sl, r0
 8000f16:	429e      	cmp	r6, r3
 8000f18:	460c      	mov	r4, r1
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	d835      	bhi.n	8000f8c <__ssputs_r+0x7e>
 8000f20:	898a      	ldrh	r2, [r1, #12]
 8000f22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000f26:	d031      	beq.n	8000f8c <__ssputs_r+0x7e>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	6825      	ldr	r5, [r4, #0]
 8000f2c:	6909      	ldr	r1, [r1, #16]
 8000f2e:	1a6f      	subs	r7, r5, r1
 8000f30:	6965      	ldr	r5, [r4, #20]
 8000f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f36:	fb95 f5f3 	sdiv	r5, r5, r3
 8000f3a:	f108 0301 	add.w	r3, r8, #1
 8000f3e:	443b      	add	r3, r7
 8000f40:	429d      	cmp	r5, r3
 8000f42:	bf38      	it	cc
 8000f44:	461d      	movcc	r5, r3
 8000f46:	0553      	lsls	r3, r2, #21
 8000f48:	d531      	bpl.n	8000fae <__ssputs_r+0xa0>
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f000 fb46 	bl	80015dc <_malloc_r>
 8000f50:	4606      	mov	r6, r0
 8000f52:	b950      	cbnz	r0, 8000f6a <__ssputs_r+0x5c>
 8000f54:	230c      	movs	r3, #12
 8000f56:	f8ca 3000 	str.w	r3, [sl]
 8000f5a:	89a3      	ldrh	r3, [r4, #12]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	81a3      	strh	r3, [r4, #12]
 8000f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6a:	463a      	mov	r2, r7
 8000f6c:	6921      	ldr	r1, [r4, #16]
 8000f6e:	f000 fac3 	bl	80014f8 <memcpy>
 8000f72:	89a3      	ldrh	r3, [r4, #12]
 8000f74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	81a3      	strh	r3, [r4, #12]
 8000f7e:	6126      	str	r6, [r4, #16]
 8000f80:	443e      	add	r6, r7
 8000f82:	6026      	str	r6, [r4, #0]
 8000f84:	4646      	mov	r6, r8
 8000f86:	6165      	str	r5, [r4, #20]
 8000f88:	1bed      	subs	r5, r5, r7
 8000f8a:	60a5      	str	r5, [r4, #8]
 8000f8c:	4546      	cmp	r6, r8
 8000f8e:	bf28      	it	cs
 8000f90:	4646      	movcs	r6, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	4632      	mov	r2, r6
 8000f96:	6820      	ldr	r0, [r4, #0]
 8000f98:	f000 fab9 	bl	800150e <memmove>
 8000f9c:	68a3      	ldr	r3, [r4, #8]
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	1b9b      	subs	r3, r3, r6
 8000fa2:	60a3      	str	r3, [r4, #8]
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	441e      	add	r6, r3
 8000fa8:	6026      	str	r6, [r4, #0]
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	462a      	mov	r2, r5
 8000fb0:	f000 fb72 	bl	8001698 <_realloc_r>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d1e1      	bne.n	8000f7e <__ssputs_r+0x70>
 8000fba:	6921      	ldr	r1, [r4, #16]
 8000fbc:	4650      	mov	r0, sl
 8000fbe:	f000 fac1 	bl	8001544 <_free_r>
 8000fc2:	e7c7      	b.n	8000f54 <__ssputs_r+0x46>

08000fc4 <_svfiprintf_r>:
 8000fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc8:	b09d      	sub	sp, #116	; 0x74
 8000fca:	9303      	str	r3, [sp, #12]
 8000fcc:	898b      	ldrh	r3, [r1, #12]
 8000fce:	4680      	mov	r8, r0
 8000fd0:	061c      	lsls	r4, r3, #24
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4616      	mov	r6, r2
 8000fd6:	d50f      	bpl.n	8000ff8 <_svfiprintf_r+0x34>
 8000fd8:	690b      	ldr	r3, [r1, #16]
 8000fda:	b96b      	cbnz	r3, 8000ff8 <_svfiprintf_r+0x34>
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	f000 fafd 	bl	80015dc <_malloc_r>
 8000fe2:	6028      	str	r0, [r5, #0]
 8000fe4:	6128      	str	r0, [r5, #16]
 8000fe6:	b928      	cbnz	r0, 8000ff4 <_svfiprintf_r+0x30>
 8000fe8:	230c      	movs	r3, #12
 8000fea:	f8c8 3000 	str.w	r3, [r8]
 8000fee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff2:	e0c4      	b.n	800117e <_svfiprintf_r+0x1ba>
 8000ff4:	2340      	movs	r3, #64	; 0x40
 8000ff6:	616b      	str	r3, [r5, #20]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001002:	2330      	movs	r3, #48	; 0x30
 8001004:	f04f 0b01 	mov.w	fp, #1
 8001008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800100c:	4637      	mov	r7, r6
 800100e:	463c      	mov	r4, r7
 8001010:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d13c      	bne.n	8001092 <_svfiprintf_r+0xce>
 8001018:	ebb7 0a06 	subs.w	sl, r7, r6
 800101c:	d00b      	beq.n	8001036 <_svfiprintf_r+0x72>
 800101e:	4653      	mov	r3, sl
 8001020:	4632      	mov	r2, r6
 8001022:	4629      	mov	r1, r5
 8001024:	4640      	mov	r0, r8
 8001026:	f7ff ff72 	bl	8000f0e <__ssputs_r>
 800102a:	3001      	adds	r0, #1
 800102c:	f000 80a2 	beq.w	8001174 <_svfiprintf_r+0x1b0>
 8001030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001032:	4453      	add	r3, sl
 8001034:	9309      	str	r3, [sp, #36]	; 0x24
 8001036:	783b      	ldrb	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 809b 	beq.w	8001174 <_svfiprintf_r+0x1b0>
 800103e:	2300      	movs	r3, #0
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	9304      	str	r3, [sp, #16]
 8001046:	9307      	str	r3, [sp, #28]
 8001048:	9205      	str	r2, [sp, #20]
 800104a:	9306      	str	r3, [sp, #24]
 800104c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001050:	931a      	str	r3, [sp, #104]	; 0x68
 8001052:	2205      	movs	r2, #5
 8001054:	7821      	ldrb	r1, [r4, #0]
 8001056:	4850      	ldr	r0, [pc, #320]	; (8001198 <_svfiprintf_r+0x1d4>)
 8001058:	f000 fa40 	bl	80014dc <memchr>
 800105c:	1c67      	adds	r7, r4, #1
 800105e:	9b04      	ldr	r3, [sp, #16]
 8001060:	b9d8      	cbnz	r0, 800109a <_svfiprintf_r+0xd6>
 8001062:	06d9      	lsls	r1, r3, #27
 8001064:	bf44      	itt	mi
 8001066:	2220      	movmi	r2, #32
 8001068:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800106c:	071a      	lsls	r2, r3, #28
 800106e:	bf44      	itt	mi
 8001070:	222b      	movmi	r2, #43	; 0x2b
 8001072:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001076:	7822      	ldrb	r2, [r4, #0]
 8001078:	2a2a      	cmp	r2, #42	; 0x2a
 800107a:	d016      	beq.n	80010aa <_svfiprintf_r+0xe6>
 800107c:	2100      	movs	r1, #0
 800107e:	200a      	movs	r0, #10
 8001080:	9a07      	ldr	r2, [sp, #28]
 8001082:	4627      	mov	r7, r4
 8001084:	783b      	ldrb	r3, [r7, #0]
 8001086:	3401      	adds	r4, #1
 8001088:	3b30      	subs	r3, #48	; 0x30
 800108a:	2b09      	cmp	r3, #9
 800108c:	d950      	bls.n	8001130 <_svfiprintf_r+0x16c>
 800108e:	b1c9      	cbz	r1, 80010c4 <_svfiprintf_r+0x100>
 8001090:	e011      	b.n	80010b6 <_svfiprintf_r+0xf2>
 8001092:	2b25      	cmp	r3, #37	; 0x25
 8001094:	d0c0      	beq.n	8001018 <_svfiprintf_r+0x54>
 8001096:	4627      	mov	r7, r4
 8001098:	e7b9      	b.n	800100e <_svfiprintf_r+0x4a>
 800109a:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <_svfiprintf_r+0x1d4>)
 800109c:	463c      	mov	r4, r7
 800109e:	1a80      	subs	r0, r0, r2
 80010a0:	fa0b f000 	lsl.w	r0, fp, r0
 80010a4:	4318      	orrs	r0, r3
 80010a6:	9004      	str	r0, [sp, #16]
 80010a8:	e7d3      	b.n	8001052 <_svfiprintf_r+0x8e>
 80010aa:	9a03      	ldr	r2, [sp, #12]
 80010ac:	1d11      	adds	r1, r2, #4
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	9103      	str	r1, [sp, #12]
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	db01      	blt.n	80010ba <_svfiprintf_r+0xf6>
 80010b6:	9207      	str	r2, [sp, #28]
 80010b8:	e004      	b.n	80010c4 <_svfiprintf_r+0x100>
 80010ba:	4252      	negs	r2, r2
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	9207      	str	r2, [sp, #28]
 80010c2:	9304      	str	r3, [sp, #16]
 80010c4:	783b      	ldrb	r3, [r7, #0]
 80010c6:	2b2e      	cmp	r3, #46	; 0x2e
 80010c8:	d10d      	bne.n	80010e6 <_svfiprintf_r+0x122>
 80010ca:	787b      	ldrb	r3, [r7, #1]
 80010cc:	1c79      	adds	r1, r7, #1
 80010ce:	2b2a      	cmp	r3, #42	; 0x2a
 80010d0:	d132      	bne.n	8001138 <_svfiprintf_r+0x174>
 80010d2:	9b03      	ldr	r3, [sp, #12]
 80010d4:	3702      	adds	r7, #2
 80010d6:	1d1a      	adds	r2, r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	9203      	str	r2, [sp, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bfb8      	it	lt
 80010e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80010e4:	9305      	str	r3, [sp, #20]
 80010e6:	4c2d      	ldr	r4, [pc, #180]	; (800119c <_svfiprintf_r+0x1d8>)
 80010e8:	2203      	movs	r2, #3
 80010ea:	7839      	ldrb	r1, [r7, #0]
 80010ec:	4620      	mov	r0, r4
 80010ee:	f000 f9f5 	bl	80014dc <memchr>
 80010f2:	b138      	cbz	r0, 8001104 <_svfiprintf_r+0x140>
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	1b00      	subs	r0, r0, r4
 80010f8:	fa03 f000 	lsl.w	r0, r3, r0
 80010fc:	9b04      	ldr	r3, [sp, #16]
 80010fe:	3701      	adds	r7, #1
 8001100:	4303      	orrs	r3, r0
 8001102:	9304      	str	r3, [sp, #16]
 8001104:	7839      	ldrb	r1, [r7, #0]
 8001106:	2206      	movs	r2, #6
 8001108:	4825      	ldr	r0, [pc, #148]	; (80011a0 <_svfiprintf_r+0x1dc>)
 800110a:	1c7e      	adds	r6, r7, #1
 800110c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001110:	f000 f9e4 	bl	80014dc <memchr>
 8001114:	2800      	cmp	r0, #0
 8001116:	d035      	beq.n	8001184 <_svfiprintf_r+0x1c0>
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <_svfiprintf_r+0x1e0>)
 800111a:	b9fb      	cbnz	r3, 800115c <_svfiprintf_r+0x198>
 800111c:	9b03      	ldr	r3, [sp, #12]
 800111e:	3307      	adds	r3, #7
 8001120:	f023 0307 	bic.w	r3, r3, #7
 8001124:	3308      	adds	r3, #8
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800112a:	444b      	add	r3, r9
 800112c:	9309      	str	r3, [sp, #36]	; 0x24
 800112e:	e76d      	b.n	800100c <_svfiprintf_r+0x48>
 8001130:	fb00 3202 	mla	r2, r0, r2, r3
 8001134:	2101      	movs	r1, #1
 8001136:	e7a4      	b.n	8001082 <_svfiprintf_r+0xbe>
 8001138:	2300      	movs	r3, #0
 800113a:	240a      	movs	r4, #10
 800113c:	4618      	mov	r0, r3
 800113e:	9305      	str	r3, [sp, #20]
 8001140:	460f      	mov	r7, r1
 8001142:	783a      	ldrb	r2, [r7, #0]
 8001144:	3101      	adds	r1, #1
 8001146:	3a30      	subs	r2, #48	; 0x30
 8001148:	2a09      	cmp	r2, #9
 800114a:	d903      	bls.n	8001154 <_svfiprintf_r+0x190>
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0ca      	beq.n	80010e6 <_svfiprintf_r+0x122>
 8001150:	9005      	str	r0, [sp, #20]
 8001152:	e7c8      	b.n	80010e6 <_svfiprintf_r+0x122>
 8001154:	fb04 2000 	mla	r0, r4, r0, r2
 8001158:	2301      	movs	r3, #1
 800115a:	e7f1      	b.n	8001140 <_svfiprintf_r+0x17c>
 800115c:	ab03      	add	r3, sp, #12
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	462a      	mov	r2, r5
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_svfiprintf_r+0x1e4>)
 8001164:	a904      	add	r1, sp, #16
 8001166:	4640      	mov	r0, r8
 8001168:	f3af 8000 	nop.w
 800116c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001170:	4681      	mov	r9, r0
 8001172:	d1d9      	bne.n	8001128 <_svfiprintf_r+0x164>
 8001174:	89ab      	ldrh	r3, [r5, #12]
 8001176:	065b      	lsls	r3, r3, #25
 8001178:	f53f af39 	bmi.w	8000fee <_svfiprintf_r+0x2a>
 800117c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800117e:	b01d      	add	sp, #116	; 0x74
 8001180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001184:	ab03      	add	r3, sp, #12
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	462a      	mov	r2, r5
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_svfiprintf_r+0x1e4>)
 800118c:	a904      	add	r1, sp, #16
 800118e:	4640      	mov	r0, r8
 8001190:	f000 f884 	bl	800129c <_printf_i>
 8001194:	e7ea      	b.n	800116c <_svfiprintf_r+0x1a8>
 8001196:	bf00      	nop
 8001198:	08001763 	.word	0x08001763
 800119c:	08001769 	.word	0x08001769
 80011a0:	0800176d 	.word	0x0800176d
 80011a4:	00000000 	.word	0x00000000
 80011a8:	08000f0f 	.word	0x08000f0f

080011ac <_printf_common>:
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b0:	4691      	mov	r9, r2
 80011b2:	461f      	mov	r7, r3
 80011b4:	688a      	ldr	r2, [r1, #8]
 80011b6:	690b      	ldr	r3, [r1, #16]
 80011b8:	4606      	mov	r6, r0
 80011ba:	4293      	cmp	r3, r2
 80011bc:	bfb8      	it	lt
 80011be:	4613      	movlt	r3, r2
 80011c0:	f8c9 3000 	str.w	r3, [r9]
 80011c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80011c8:	460c      	mov	r4, r1
 80011ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80011ce:	b112      	cbz	r2, 80011d6 <_printf_common+0x2a>
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8c9 3000 	str.w	r3, [r9]
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	0699      	lsls	r1, r3, #26
 80011da:	bf42      	ittt	mi
 80011dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80011e0:	3302      	addmi	r3, #2
 80011e2:	f8c9 3000 	strmi.w	r3, [r9]
 80011e6:	6825      	ldr	r5, [r4, #0]
 80011e8:	f015 0506 	ands.w	r5, r5, #6
 80011ec:	d107      	bne.n	80011fe <_printf_common+0x52>
 80011ee:	f104 0a19 	add.w	sl, r4, #25
 80011f2:	68e3      	ldr	r3, [r4, #12]
 80011f4:	f8d9 2000 	ldr.w	r2, [r9]
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	429d      	cmp	r5, r3
 80011fc:	db2a      	blt.n	8001254 <_printf_common+0xa8>
 80011fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	3300      	adds	r3, #0
 8001206:	bf18      	it	ne
 8001208:	2301      	movne	r3, #1
 800120a:	0692      	lsls	r2, r2, #26
 800120c:	d42f      	bmi.n	800126e <_printf_common+0xc2>
 800120e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001212:	4639      	mov	r1, r7
 8001214:	4630      	mov	r0, r6
 8001216:	47c0      	blx	r8
 8001218:	3001      	adds	r0, #1
 800121a:	d022      	beq.n	8001262 <_printf_common+0xb6>
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	68e5      	ldr	r5, [r4, #12]
 8001220:	f003 0306 	and.w	r3, r3, #6
 8001224:	2b04      	cmp	r3, #4
 8001226:	bf18      	it	ne
 8001228:	2500      	movne	r5, #0
 800122a:	f8d9 2000 	ldr.w	r2, [r9]
 800122e:	f04f 0900 	mov.w	r9, #0
 8001232:	bf08      	it	eq
 8001234:	1aad      	subeq	r5, r5, r2
 8001236:	68a3      	ldr	r3, [r4, #8]
 8001238:	6922      	ldr	r2, [r4, #16]
 800123a:	bf08      	it	eq
 800123c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001240:	4293      	cmp	r3, r2
 8001242:	bfc4      	itt	gt
 8001244:	1a9b      	subgt	r3, r3, r2
 8001246:	18ed      	addgt	r5, r5, r3
 8001248:	341a      	adds	r4, #26
 800124a:	454d      	cmp	r5, r9
 800124c:	d11b      	bne.n	8001286 <_printf_common+0xda>
 800124e:	2000      	movs	r0, #0
 8001250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001254:	2301      	movs	r3, #1
 8001256:	4652      	mov	r2, sl
 8001258:	4639      	mov	r1, r7
 800125a:	4630      	mov	r0, r6
 800125c:	47c0      	blx	r8
 800125e:	3001      	adds	r0, #1
 8001260:	d103      	bne.n	800126a <_printf_common+0xbe>
 8001262:	f04f 30ff 	mov.w	r0, #4294967295
 8001266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126a:	3501      	adds	r5, #1
 800126c:	e7c1      	b.n	80011f2 <_printf_common+0x46>
 800126e:	2030      	movs	r0, #48	; 0x30
 8001270:	18e1      	adds	r1, r4, r3
 8001272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800127c:	4422      	add	r2, r4
 800127e:	3302      	adds	r3, #2
 8001280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001284:	e7c3      	b.n	800120e <_printf_common+0x62>
 8001286:	2301      	movs	r3, #1
 8001288:	4622      	mov	r2, r4
 800128a:	4639      	mov	r1, r7
 800128c:	4630      	mov	r0, r6
 800128e:	47c0      	blx	r8
 8001290:	3001      	adds	r0, #1
 8001292:	d0e6      	beq.n	8001262 <_printf_common+0xb6>
 8001294:	f109 0901 	add.w	r9, r9, #1
 8001298:	e7d7      	b.n	800124a <_printf_common+0x9e>
	...

0800129c <_printf_i>:
 800129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a0:	4617      	mov	r7, r2
 80012a2:	7e0a      	ldrb	r2, [r1, #24]
 80012a4:	b085      	sub	sp, #20
 80012a6:	2a6e      	cmp	r2, #110	; 0x6e
 80012a8:	4698      	mov	r8, r3
 80012aa:	4606      	mov	r6, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80012b0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80012b4:	f000 80bc 	beq.w	8001430 <_printf_i+0x194>
 80012b8:	d81a      	bhi.n	80012f0 <_printf_i+0x54>
 80012ba:	2a63      	cmp	r2, #99	; 0x63
 80012bc:	d02e      	beq.n	800131c <_printf_i+0x80>
 80012be:	d80a      	bhi.n	80012d6 <_printf_i+0x3a>
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	f000 80c8 	beq.w	8001456 <_printf_i+0x1ba>
 80012c6:	2a58      	cmp	r2, #88	; 0x58
 80012c8:	f000 808a 	beq.w	80013e0 <_printf_i+0x144>
 80012cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012d0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80012d4:	e02a      	b.n	800132c <_printf_i+0x90>
 80012d6:	2a64      	cmp	r2, #100	; 0x64
 80012d8:	d001      	beq.n	80012de <_printf_i+0x42>
 80012da:	2a69      	cmp	r2, #105	; 0x69
 80012dc:	d1f6      	bne.n	80012cc <_printf_i+0x30>
 80012de:	6821      	ldr	r1, [r4, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80012e6:	d023      	beq.n	8001330 <_printf_i+0x94>
 80012e8:	1d11      	adds	r1, r2, #4
 80012ea:	6019      	str	r1, [r3, #0]
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	e027      	b.n	8001340 <_printf_i+0xa4>
 80012f0:	2a73      	cmp	r2, #115	; 0x73
 80012f2:	f000 80b4 	beq.w	800145e <_printf_i+0x1c2>
 80012f6:	d808      	bhi.n	800130a <_printf_i+0x6e>
 80012f8:	2a6f      	cmp	r2, #111	; 0x6f
 80012fa:	d02a      	beq.n	8001352 <_printf_i+0xb6>
 80012fc:	2a70      	cmp	r2, #112	; 0x70
 80012fe:	d1e5      	bne.n	80012cc <_printf_i+0x30>
 8001300:	680a      	ldr	r2, [r1, #0]
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	600a      	str	r2, [r1, #0]
 8001308:	e003      	b.n	8001312 <_printf_i+0x76>
 800130a:	2a75      	cmp	r2, #117	; 0x75
 800130c:	d021      	beq.n	8001352 <_printf_i+0xb6>
 800130e:	2a78      	cmp	r2, #120	; 0x78
 8001310:	d1dc      	bne.n	80012cc <_printf_i+0x30>
 8001312:	2278      	movs	r2, #120	; 0x78
 8001314:	496f      	ldr	r1, [pc, #444]	; (80014d4 <_printf_i+0x238>)
 8001316:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800131a:	e064      	b.n	80013e6 <_printf_i+0x14a>
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001322:	1d11      	adds	r1, r2, #4
 8001324:	6019      	str	r1, [r3, #0]
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800132c:	2301      	movs	r3, #1
 800132e:	e0a3      	b.n	8001478 <_printf_i+0x1dc>
 8001330:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001334:	f102 0104 	add.w	r1, r2, #4
 8001338:	6019      	str	r1, [r3, #0]
 800133a:	d0d7      	beq.n	80012ec <_printf_i+0x50>
 800133c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001340:	2b00      	cmp	r3, #0
 8001342:	da03      	bge.n	800134c <_printf_i+0xb0>
 8001344:	222d      	movs	r2, #45	; 0x2d
 8001346:	425b      	negs	r3, r3
 8001348:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800134c:	4962      	ldr	r1, [pc, #392]	; (80014d8 <_printf_i+0x23c>)
 800134e:	220a      	movs	r2, #10
 8001350:	e017      	b.n	8001382 <_printf_i+0xe6>
 8001352:	6820      	ldr	r0, [r4, #0]
 8001354:	6819      	ldr	r1, [r3, #0]
 8001356:	f010 0f80 	tst.w	r0, #128	; 0x80
 800135a:	d003      	beq.n	8001364 <_printf_i+0xc8>
 800135c:	1d08      	adds	r0, r1, #4
 800135e:	6018      	str	r0, [r3, #0]
 8001360:	680b      	ldr	r3, [r1, #0]
 8001362:	e006      	b.n	8001372 <_printf_i+0xd6>
 8001364:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001368:	f101 0004 	add.w	r0, r1, #4
 800136c:	6018      	str	r0, [r3, #0]
 800136e:	d0f7      	beq.n	8001360 <_printf_i+0xc4>
 8001370:	880b      	ldrh	r3, [r1, #0]
 8001372:	2a6f      	cmp	r2, #111	; 0x6f
 8001374:	bf14      	ite	ne
 8001376:	220a      	movne	r2, #10
 8001378:	2208      	moveq	r2, #8
 800137a:	4957      	ldr	r1, [pc, #348]	; (80014d8 <_printf_i+0x23c>)
 800137c:	2000      	movs	r0, #0
 800137e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001382:	6865      	ldr	r5, [r4, #4]
 8001384:	2d00      	cmp	r5, #0
 8001386:	60a5      	str	r5, [r4, #8]
 8001388:	f2c0 809c 	blt.w	80014c4 <_printf_i+0x228>
 800138c:	6820      	ldr	r0, [r4, #0]
 800138e:	f020 0004 	bic.w	r0, r0, #4
 8001392:	6020      	str	r0, [r4, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d13f      	bne.n	8001418 <_printf_i+0x17c>
 8001398:	2d00      	cmp	r5, #0
 800139a:	f040 8095 	bne.w	80014c8 <_printf_i+0x22c>
 800139e:	4675      	mov	r5, lr
 80013a0:	2a08      	cmp	r2, #8
 80013a2:	d10b      	bne.n	80013bc <_printf_i+0x120>
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	07da      	lsls	r2, r3, #31
 80013a8:	d508      	bpl.n	80013bc <_printf_i+0x120>
 80013aa:	6923      	ldr	r3, [r4, #16]
 80013ac:	6862      	ldr	r2, [r4, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bfde      	ittt	le
 80013b2:	2330      	movle	r3, #48	; 0x30
 80013b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80013b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80013bc:	ebae 0305 	sub.w	r3, lr, r5
 80013c0:	6123      	str	r3, [r4, #16]
 80013c2:	f8cd 8000 	str.w	r8, [sp]
 80013c6:	463b      	mov	r3, r7
 80013c8:	aa03      	add	r2, sp, #12
 80013ca:	4621      	mov	r1, r4
 80013cc:	4630      	mov	r0, r6
 80013ce:	f7ff feed 	bl	80011ac <_printf_common>
 80013d2:	3001      	adds	r0, #1
 80013d4:	d155      	bne.n	8001482 <_printf_i+0x1e6>
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
 80013da:	b005      	add	sp, #20
 80013dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013e0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80013e4:	493c      	ldr	r1, [pc, #240]	; (80014d8 <_printf_i+0x23c>)
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80013ee:	f100 0504 	add.w	r5, r0, #4
 80013f2:	601d      	str	r5, [r3, #0]
 80013f4:	d001      	beq.n	80013fa <_printf_i+0x15e>
 80013f6:	6803      	ldr	r3, [r0, #0]
 80013f8:	e002      	b.n	8001400 <_printf_i+0x164>
 80013fa:	0655      	lsls	r5, r2, #25
 80013fc:	d5fb      	bpl.n	80013f6 <_printf_i+0x15a>
 80013fe:	8803      	ldrh	r3, [r0, #0]
 8001400:	07d0      	lsls	r0, r2, #31
 8001402:	bf44      	itt	mi
 8001404:	f042 0220 	orrmi.w	r2, r2, #32
 8001408:	6022      	strmi	r2, [r4, #0]
 800140a:	b91b      	cbnz	r3, 8001414 <_printf_i+0x178>
 800140c:	6822      	ldr	r2, [r4, #0]
 800140e:	f022 0220 	bic.w	r2, r2, #32
 8001412:	6022      	str	r2, [r4, #0]
 8001414:	2210      	movs	r2, #16
 8001416:	e7b1      	b.n	800137c <_printf_i+0xe0>
 8001418:	4675      	mov	r5, lr
 800141a:	fbb3 f0f2 	udiv	r0, r3, r2
 800141e:	fb02 3310 	mls	r3, r2, r0, r3
 8001422:	5ccb      	ldrb	r3, [r1, r3]
 8001424:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001428:	4603      	mov	r3, r0
 800142a:	2800      	cmp	r0, #0
 800142c:	d1f5      	bne.n	800141a <_printf_i+0x17e>
 800142e:	e7b7      	b.n	80013a0 <_printf_i+0x104>
 8001430:	6808      	ldr	r0, [r1, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001438:	6949      	ldr	r1, [r1, #20]
 800143a:	d004      	beq.n	8001446 <_printf_i+0x1aa>
 800143c:	1d10      	adds	r0, r2, #4
 800143e:	6018      	str	r0, [r3, #0]
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	6019      	str	r1, [r3, #0]
 8001444:	e007      	b.n	8001456 <_printf_i+0x1ba>
 8001446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800144a:	f102 0004 	add.w	r0, r2, #4
 800144e:	6018      	str	r0, [r3, #0]
 8001450:	6813      	ldr	r3, [r2, #0]
 8001452:	d0f6      	beq.n	8001442 <_printf_i+0x1a6>
 8001454:	8019      	strh	r1, [r3, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	4675      	mov	r5, lr
 800145a:	6123      	str	r3, [r4, #16]
 800145c:	e7b1      	b.n	80013c2 <_printf_i+0x126>
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	1d11      	adds	r1, r2, #4
 8001462:	6019      	str	r1, [r3, #0]
 8001464:	6815      	ldr	r5, [r2, #0]
 8001466:	2100      	movs	r1, #0
 8001468:	6862      	ldr	r2, [r4, #4]
 800146a:	4628      	mov	r0, r5
 800146c:	f000 f836 	bl	80014dc <memchr>
 8001470:	b108      	cbz	r0, 8001476 <_printf_i+0x1da>
 8001472:	1b40      	subs	r0, r0, r5
 8001474:	6060      	str	r0, [r4, #4]
 8001476:	6863      	ldr	r3, [r4, #4]
 8001478:	6123      	str	r3, [r4, #16]
 800147a:	2300      	movs	r3, #0
 800147c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001480:	e79f      	b.n	80013c2 <_printf_i+0x126>
 8001482:	6923      	ldr	r3, [r4, #16]
 8001484:	462a      	mov	r2, r5
 8001486:	4639      	mov	r1, r7
 8001488:	4630      	mov	r0, r6
 800148a:	47c0      	blx	r8
 800148c:	3001      	adds	r0, #1
 800148e:	d0a2      	beq.n	80013d6 <_printf_i+0x13a>
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	079b      	lsls	r3, r3, #30
 8001494:	d507      	bpl.n	80014a6 <_printf_i+0x20a>
 8001496:	2500      	movs	r5, #0
 8001498:	f104 0919 	add.w	r9, r4, #25
 800149c:	68e3      	ldr	r3, [r4, #12]
 800149e:	9a03      	ldr	r2, [sp, #12]
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	429d      	cmp	r5, r3
 80014a4:	db05      	blt.n	80014b2 <_printf_i+0x216>
 80014a6:	68e0      	ldr	r0, [r4, #12]
 80014a8:	9b03      	ldr	r3, [sp, #12]
 80014aa:	4298      	cmp	r0, r3
 80014ac:	bfb8      	it	lt
 80014ae:	4618      	movlt	r0, r3
 80014b0:	e793      	b.n	80013da <_printf_i+0x13e>
 80014b2:	2301      	movs	r3, #1
 80014b4:	464a      	mov	r2, r9
 80014b6:	4639      	mov	r1, r7
 80014b8:	4630      	mov	r0, r6
 80014ba:	47c0      	blx	r8
 80014bc:	3001      	adds	r0, #1
 80014be:	d08a      	beq.n	80013d6 <_printf_i+0x13a>
 80014c0:	3501      	adds	r5, #1
 80014c2:	e7eb      	b.n	800149c <_printf_i+0x200>
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1a7      	bne.n	8001418 <_printf_i+0x17c>
 80014c8:	780b      	ldrb	r3, [r1, #0]
 80014ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014d2:	e765      	b.n	80013a0 <_printf_i+0x104>
 80014d4:	08001785 	.word	0x08001785
 80014d8:	08001774 	.word	0x08001774

080014dc <memchr>:
 80014dc:	b510      	push	{r4, lr}
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	4402      	add	r2, r0
 80014e2:	4290      	cmp	r0, r2
 80014e4:	4603      	mov	r3, r0
 80014e6:	d101      	bne.n	80014ec <memchr+0x10>
 80014e8:	2000      	movs	r0, #0
 80014ea:	bd10      	pop	{r4, pc}
 80014ec:	781c      	ldrb	r4, [r3, #0]
 80014ee:	3001      	adds	r0, #1
 80014f0:	428c      	cmp	r4, r1
 80014f2:	d1f6      	bne.n	80014e2 <memchr+0x6>
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd10      	pop	{r4, pc}

080014f8 <memcpy>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	1e43      	subs	r3, r0, #1
 80014fc:	440a      	add	r2, r1
 80014fe:	4291      	cmp	r1, r2
 8001500:	d100      	bne.n	8001504 <memcpy+0xc>
 8001502:	bd10      	pop	{r4, pc}
 8001504:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800150c:	e7f7      	b.n	80014fe <memcpy+0x6>

0800150e <memmove>:
 800150e:	4288      	cmp	r0, r1
 8001510:	b510      	push	{r4, lr}
 8001512:	eb01 0302 	add.w	r3, r1, r2
 8001516:	d803      	bhi.n	8001520 <memmove+0x12>
 8001518:	1e42      	subs	r2, r0, #1
 800151a:	4299      	cmp	r1, r3
 800151c:	d10c      	bne.n	8001538 <memmove+0x2a>
 800151e:	bd10      	pop	{r4, pc}
 8001520:	4298      	cmp	r0, r3
 8001522:	d2f9      	bcs.n	8001518 <memmove+0xa>
 8001524:	1881      	adds	r1, r0, r2
 8001526:	1ad2      	subs	r2, r2, r3
 8001528:	42d3      	cmn	r3, r2
 800152a:	d100      	bne.n	800152e <memmove+0x20>
 800152c:	bd10      	pop	{r4, pc}
 800152e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001532:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001536:	e7f7      	b.n	8001528 <memmove+0x1a>
 8001538:	f811 4b01 	ldrb.w	r4, [r1], #1
 800153c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001540:	e7eb      	b.n	800151a <memmove+0xc>
	...

08001544 <_free_r>:
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4605      	mov	r5, r0
 8001548:	2900      	cmp	r1, #0
 800154a:	d043      	beq.n	80015d4 <_free_r+0x90>
 800154c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001550:	1f0c      	subs	r4, r1, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	bfb8      	it	lt
 8001556:	18e4      	addlt	r4, r4, r3
 8001558:	f000 f8d4 	bl	8001704 <__malloc_lock>
 800155c:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <_free_r+0x94>)
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	4610      	mov	r0, r2
 8001562:	b933      	cbnz	r3, 8001572 <_free_r+0x2e>
 8001564:	6063      	str	r3, [r4, #4]
 8001566:	6014      	str	r4, [r2, #0]
 8001568:	4628      	mov	r0, r5
 800156a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800156e:	f000 b8ca 	b.w	8001706 <__malloc_unlock>
 8001572:	42a3      	cmp	r3, r4
 8001574:	d90b      	bls.n	800158e <_free_r+0x4a>
 8001576:	6821      	ldr	r1, [r4, #0]
 8001578:	1862      	adds	r2, r4, r1
 800157a:	4293      	cmp	r3, r2
 800157c:	bf01      	itttt	eq
 800157e:	681a      	ldreq	r2, [r3, #0]
 8001580:	685b      	ldreq	r3, [r3, #4]
 8001582:	1852      	addeq	r2, r2, r1
 8001584:	6022      	streq	r2, [r4, #0]
 8001586:	6063      	str	r3, [r4, #4]
 8001588:	6004      	str	r4, [r0, #0]
 800158a:	e7ed      	b.n	8001568 <_free_r+0x24>
 800158c:	4613      	mov	r3, r2
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	b10a      	cbz	r2, 8001596 <_free_r+0x52>
 8001592:	42a2      	cmp	r2, r4
 8001594:	d9fa      	bls.n	800158c <_free_r+0x48>
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	1858      	adds	r0, r3, r1
 800159a:	42a0      	cmp	r0, r4
 800159c:	d10b      	bne.n	80015b6 <_free_r+0x72>
 800159e:	6820      	ldr	r0, [r4, #0]
 80015a0:	4401      	add	r1, r0
 80015a2:	1858      	adds	r0, r3, r1
 80015a4:	4282      	cmp	r2, r0
 80015a6:	6019      	str	r1, [r3, #0]
 80015a8:	d1de      	bne.n	8001568 <_free_r+0x24>
 80015aa:	6810      	ldr	r0, [r2, #0]
 80015ac:	6852      	ldr	r2, [r2, #4]
 80015ae:	4401      	add	r1, r0
 80015b0:	6019      	str	r1, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	e7d8      	b.n	8001568 <_free_r+0x24>
 80015b6:	d902      	bls.n	80015be <_free_r+0x7a>
 80015b8:	230c      	movs	r3, #12
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	e7d4      	b.n	8001568 <_free_r+0x24>
 80015be:	6820      	ldr	r0, [r4, #0]
 80015c0:	1821      	adds	r1, r4, r0
 80015c2:	428a      	cmp	r2, r1
 80015c4:	bf01      	itttt	eq
 80015c6:	6811      	ldreq	r1, [r2, #0]
 80015c8:	6852      	ldreq	r2, [r2, #4]
 80015ca:	1809      	addeq	r1, r1, r0
 80015cc:	6021      	streq	r1, [r4, #0]
 80015ce:	6062      	str	r2, [r4, #4]
 80015d0:	605c      	str	r4, [r3, #4]
 80015d2:	e7c9      	b.n	8001568 <_free_r+0x24>
 80015d4:	bd38      	pop	{r3, r4, r5, pc}
 80015d6:	bf00      	nop
 80015d8:	20000094 	.word	0x20000094

080015dc <_malloc_r>:
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	1ccd      	adds	r5, r1, #3
 80015e0:	f025 0503 	bic.w	r5, r5, #3
 80015e4:	3508      	adds	r5, #8
 80015e6:	2d0c      	cmp	r5, #12
 80015e8:	bf38      	it	cc
 80015ea:	250c      	movcc	r5, #12
 80015ec:	2d00      	cmp	r5, #0
 80015ee:	4606      	mov	r6, r0
 80015f0:	db01      	blt.n	80015f6 <_malloc_r+0x1a>
 80015f2:	42a9      	cmp	r1, r5
 80015f4:	d903      	bls.n	80015fe <_malloc_r+0x22>
 80015f6:	230c      	movs	r3, #12
 80015f8:	6033      	str	r3, [r6, #0]
 80015fa:	2000      	movs	r0, #0
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
 80015fe:	f000 f881 	bl	8001704 <__malloc_lock>
 8001602:	4a23      	ldr	r2, [pc, #140]	; (8001690 <_malloc_r+0xb4>)
 8001604:	6814      	ldr	r4, [r2, #0]
 8001606:	4621      	mov	r1, r4
 8001608:	b991      	cbnz	r1, 8001630 <_malloc_r+0x54>
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <_malloc_r+0xb8>)
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	b91b      	cbnz	r3, 8001618 <_malloc_r+0x3c>
 8001610:	4630      	mov	r0, r6
 8001612:	f000 f867 	bl	80016e4 <_sbrk_r>
 8001616:	6020      	str	r0, [r4, #0]
 8001618:	4629      	mov	r1, r5
 800161a:	4630      	mov	r0, r6
 800161c:	f000 f862 	bl	80016e4 <_sbrk_r>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	d126      	bne.n	8001672 <_malloc_r+0x96>
 8001624:	230c      	movs	r3, #12
 8001626:	4630      	mov	r0, r6
 8001628:	6033      	str	r3, [r6, #0]
 800162a:	f000 f86c 	bl	8001706 <__malloc_unlock>
 800162e:	e7e4      	b.n	80015fa <_malloc_r+0x1e>
 8001630:	680b      	ldr	r3, [r1, #0]
 8001632:	1b5b      	subs	r3, r3, r5
 8001634:	d41a      	bmi.n	800166c <_malloc_r+0x90>
 8001636:	2b0b      	cmp	r3, #11
 8001638:	d90f      	bls.n	800165a <_malloc_r+0x7e>
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	18cc      	adds	r4, r1, r3
 800163e:	50cd      	str	r5, [r1, r3]
 8001640:	4630      	mov	r0, r6
 8001642:	f000 f860 	bl	8001706 <__malloc_unlock>
 8001646:	f104 000b 	add.w	r0, r4, #11
 800164a:	1d23      	adds	r3, r4, #4
 800164c:	f020 0007 	bic.w	r0, r0, #7
 8001650:	1ac3      	subs	r3, r0, r3
 8001652:	d01b      	beq.n	800168c <_malloc_r+0xb0>
 8001654:	425a      	negs	r2, r3
 8001656:	50e2      	str	r2, [r4, r3]
 8001658:	bd70      	pop	{r4, r5, r6, pc}
 800165a:	428c      	cmp	r4, r1
 800165c:	bf0b      	itete	eq
 800165e:	6863      	ldreq	r3, [r4, #4]
 8001660:	684b      	ldrne	r3, [r1, #4]
 8001662:	6013      	streq	r3, [r2, #0]
 8001664:	6063      	strne	r3, [r4, #4]
 8001666:	bf18      	it	ne
 8001668:	460c      	movne	r4, r1
 800166a:	e7e9      	b.n	8001640 <_malloc_r+0x64>
 800166c:	460c      	mov	r4, r1
 800166e:	6849      	ldr	r1, [r1, #4]
 8001670:	e7ca      	b.n	8001608 <_malloc_r+0x2c>
 8001672:	1cc4      	adds	r4, r0, #3
 8001674:	f024 0403 	bic.w	r4, r4, #3
 8001678:	42a0      	cmp	r0, r4
 800167a:	d005      	beq.n	8001688 <_malloc_r+0xac>
 800167c:	1a21      	subs	r1, r4, r0
 800167e:	4630      	mov	r0, r6
 8001680:	f000 f830 	bl	80016e4 <_sbrk_r>
 8001684:	3001      	adds	r0, #1
 8001686:	d0cd      	beq.n	8001624 <_malloc_r+0x48>
 8001688:	6025      	str	r5, [r4, #0]
 800168a:	e7d9      	b.n	8001640 <_malloc_r+0x64>
 800168c:	bd70      	pop	{r4, r5, r6, pc}
 800168e:	bf00      	nop
 8001690:	20000094 	.word	0x20000094
 8001694:	20000098 	.word	0x20000098

08001698 <_realloc_r>:
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	4607      	mov	r7, r0
 800169c:	4614      	mov	r4, r2
 800169e:	460e      	mov	r6, r1
 80016a0:	b921      	cbnz	r1, 80016ac <_realloc_r+0x14>
 80016a2:	4611      	mov	r1, r2
 80016a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80016a8:	f7ff bf98 	b.w	80015dc <_malloc_r>
 80016ac:	b922      	cbnz	r2, 80016b8 <_realloc_r+0x20>
 80016ae:	f7ff ff49 	bl	8001544 <_free_r>
 80016b2:	4625      	mov	r5, r4
 80016b4:	4628      	mov	r0, r5
 80016b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016b8:	f000 f826 	bl	8001708 <_malloc_usable_size_r>
 80016bc:	4284      	cmp	r4, r0
 80016be:	d90f      	bls.n	80016e0 <_realloc_r+0x48>
 80016c0:	4621      	mov	r1, r4
 80016c2:	4638      	mov	r0, r7
 80016c4:	f7ff ff8a 	bl	80015dc <_malloc_r>
 80016c8:	4605      	mov	r5, r0
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d0f2      	beq.n	80016b4 <_realloc_r+0x1c>
 80016ce:	4631      	mov	r1, r6
 80016d0:	4622      	mov	r2, r4
 80016d2:	f7ff ff11 	bl	80014f8 <memcpy>
 80016d6:	4631      	mov	r1, r6
 80016d8:	4638      	mov	r0, r7
 80016da:	f7ff ff33 	bl	8001544 <_free_r>
 80016de:	e7e9      	b.n	80016b4 <_realloc_r+0x1c>
 80016e0:	4635      	mov	r5, r6
 80016e2:	e7e7      	b.n	80016b4 <_realloc_r+0x1c>

080016e4 <_sbrk_r>:
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	2300      	movs	r3, #0
 80016e8:	4c05      	ldr	r4, [pc, #20]	; (8001700 <_sbrk_r+0x1c>)
 80016ea:	4605      	mov	r5, r0
 80016ec:	4608      	mov	r0, r1
 80016ee:	6023      	str	r3, [r4, #0]
 80016f0:	f7ff fb42 	bl	8000d78 <_sbrk>
 80016f4:	1c43      	adds	r3, r0, #1
 80016f6:	d102      	bne.n	80016fe <_sbrk_r+0x1a>
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	b103      	cbz	r3, 80016fe <_sbrk_r+0x1a>
 80016fc:	602b      	str	r3, [r5, #0]
 80016fe:	bd38      	pop	{r3, r4, r5, pc}
 8001700:	200000e0 	.word	0x200000e0

08001704 <__malloc_lock>:
 8001704:	4770      	bx	lr

08001706 <__malloc_unlock>:
 8001706:	4770      	bx	lr

08001708 <_malloc_usable_size_r>:
 8001708:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800170c:	2800      	cmp	r0, #0
 800170e:	f1a0 0004 	sub.w	r0, r0, #4
 8001712:	bfbc      	itt	lt
 8001714:	580b      	ldrlt	r3, [r1, r0]
 8001716:	18c0      	addlt	r0, r0, r3
 8001718:	4770      	bx	lr
	...

0800171c <_init>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	bf00      	nop
 8001720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001722:	bc08      	pop	{r3}
 8001724:	469e      	mov	lr, r3
 8001726:	4770      	bx	lr

08001728 <_fini>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	bf00      	nop
 800172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172e:	bc08      	pop	{r3}
 8001730:	469e      	mov	lr, r3
 8001732:	4770      	bx	lr
